{"version":3,"file":"zenkai-ui.min.js","sources":["../src/std/std-parse.js","../src/std/std-object.js","../src/std/std-logic.js","../src/dom/dom-parse.js","../src/std/std-string.js","../src/dom/element-class-manip.js","../src/dom/element-manip.js","../src/dom/dom-create.js","../src/dom/dom-append.js","../src/dom/dom-query.js","../src/ui/form/floating-label.js","../src/ui/form/utils.js","../src/ui/form/selector/base-selector.js","../src/ui/form/selector/form-selector.js","../src/ui/form/selector/factory.js","../src/ui/form/selector/index.js","../src/ui/form/switch.js","../src/ui/utils.js","../src/ui/collapsible.js","../src/ui/form/input-counter.js"],"sourcesContent":["/**\r\n * Returns an object value or default value if undefined\r\n * @param {*} arg object\r\n * @param {*} value default value\r\n * @param {boolean} [isNullable] indicates whether the value can be assigned the value *NULL*\r\n * @memberof TYPE\r\n */\r\nexport function valOrDefault(arg, value, isNullable) {\r\n    if (isNullable === true) {\r\n        return isUndefined(arg) ? value : arg;\r\n    }\r\n\r\n    return isNullOrUndefined(arg) ? value : arg;\r\n}\r\n\r\n/**\r\n * Returns a value indicating whether the value is empty\r\n * @param {Object[]|string} arr array\r\n * @returns {boolean}\r\n * @memberof TYPE\r\n */\r\nexport function isEmpty(obj) {\r\n    return (Array.isArray(obj) || isString(obj)) && obj.length === 0;\r\n}\r\n\r\n/**\r\n * Returns a value indicating whether the variable is a Date\r\n * @param {*} value \r\n * @returns {boolean}\r\n * @memberof TYPE\r\n */\r\nexport function isDate(value) {\r\n    return value instanceof Date || (typeof value === 'object' && Object.prototype.toString.call(value) === '[object Date]');\r\n}\r\n\r\n/**\r\n * Returns a value indicating whether the variable is a String\r\n * @param {*} value\r\n * @returns {boolean}\r\n * @memberof TYPE\r\n */\r\nexport function isString(value) {\r\n    return typeof value === 'string' || value instanceof String;\r\n}\r\n\r\n/**\r\n * Returns a value indicating whether the value is a Function\r\n * @param {string} value\r\n * @returns {boolean}\r\n * @memberof TYPE\r\n */\r\nexport function isFunction(value) {\r\n    return typeof value === 'function';\r\n}\r\n\r\n/**\r\n * Returns a value indicating whether the value is an Object\r\n * @param {string} value\r\n * @returns {boolean}\r\n * @memberof TYPE\r\n */\r\nexport function isObject(value) {\r\n    return !isNullOrUndefined(value) && typeof value === 'object';\r\n}\r\n\r\n/**\r\n * Returns a value indicating whether the object is iterable\r\n * @param {*} obj\r\n * @returns {boolean}\r\n * @memberof TYPE\r\n */\r\nexport function isIterable(obj) {\r\n    return !isNullOrUndefined(obj) && typeof obj[Symbol.iterator] === 'function';\r\n}\r\n\r\n/**\r\n * Returns a value indicating whether the value is null\r\n * @param {string} value\r\n * @returns {boolean}\r\n * @memberof TYPE\r\n */\r\nexport function isNull(value) { \r\n    return value === null; \r\n}\r\n\r\n/**\r\n * Returns a value indicating whether a string is null or made of whitespace.\r\n * @param {string} str string\r\n * @returns {boolean}\r\n * @memberof TYPE\r\n */\r\nexport function isNullOrWhitespace(str) {\r\n    return (!str || isString(str) && (str.length === 0 || /^\\s*$/.test(str)));\r\n}\r\n\r\n/**\r\n * Returns a value indicating whether the value is undefined\r\n * @param {*} value\r\n * @returns {boolean}\r\n * @memberof TYPE\r\n */\r\nexport function isUndefined(value) { \r\n    return typeof value === 'undefined'; \r\n}\r\n\r\n/**\r\n * Returns a value indicating whether the value is null or undefined\r\n * @returns {boolean}\r\n * @memberof TYPE\r\n */\r\nexport function isNullOrUndefined(value) { \r\n    return isNull(value) || isUndefined(value); \r\n}","/** @private */\r\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\r\n/** @private */\r\nconst isPrototypeOf = Object.prototype.isPrototypeOf;\r\n\r\nexport const defProp = Object.defineProperty;\r\n\r\n/**\r\n * Returns a boolean indicating whether the object has the specified property as its own property (not inherited).\r\n * @param {*} obj target object\r\n * @param {string} key name of the property\r\n * @memberof STD\r\n */\r\nexport const hasOwn = function (obj, key) { return hasOwnProperty.call(obj, key); };\r\n\r\n/**\r\n * Returns a boolean indicating whether the object (child) inherit from another object (parent)\r\n * @param {*} child \r\n * @param {*} parent \r\n * @memberof STD\r\n */\r\nexport const isDerivedOf = function (child, parent) {\r\n    return Object.getPrototypeOf(child) !== parent && isPrototypeOf.call(parent, child);\r\n};\r\n\r\n/**\r\n * \r\n * @param {*} obj \r\n * @memberof STD\r\n */\r\nexport function cloneObject(obj) {\r\n    if (obj === null || typeof (obj) !== 'object') {\r\n        return obj;\r\n    }\r\n\r\n    var temp = obj.constructor(); // changed\r\n    for (var key in obj) {\r\n        if (hasOwn(obj, key)) {\r\n            obj['isActiveClone'] = null;\r\n            temp[key] = cloneObject(obj[key]);\r\n            delete obj['isActiveClone'];\r\n        }\r\n    }\r\n\r\n    return temp;\r\n}","import { isNullOrUndefined } from \"./std-parse\";\r\n\r\n/**\r\n * Verifies that at least one value satisfies the condition\r\n * @param {*[]} values Set of values\r\n * @param {Function} pred Condition\r\n * @returns {boolean} A value indicating whether at least one value satisfies the condition\r\n * @memberof STD\r\n */\r\nexport const some = function (values, pred) {\r\n    for (let i = 0; i < values.length; i++) {\r\n        let value = values[i];\r\n\r\n        if (pred(...(Array.isArray(value) ? value : [value]))) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\n/**\r\n * Verifies that at the condition is satisfied for a a number of value\r\n * @param {*[]} values Set of values\r\n * @param {Function} pred Condition\r\n * @param {number} [min=1] Minimum number of values that must satisfy the condition\r\n * @param {number} [max=-1] Minimum number of values that must satisfy the condition\r\n * @returns {boolean} A value indicating whether at least one value satisfies the condition\r\n * @memberof STD\r\n */\r\nexport const assert = function (values, pred, min, max) {\r\n    if (max < min) {\r\n        console.error(\"`max` must be greater than `min`\");\r\n        return;\r\n    }\r\n\r\n    var hitCount = getHitCount(values, pred);\r\n\r\n    if (all([min, max], Number.isInteger)) {\r\n        return hitCount >= min && hitCount <= max;\r\n    }\r\n    if(Number.isInteger(min)) {\r\n        return hitCount >= min;\r\n    }\r\n    if(Number.isInteger(max)) {\r\n        return hitCount <= max;\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\n/**\r\n * Verifies that all the values satisfy the condition\r\n * @param {*[]} values Set of values\r\n * @param {Function} pred Condition\r\n * @returns {boolean} A value indicating whether all the values satisfy the condition\r\n * @memberof STD\r\n */\r\nexport const all = function (values, pred) {\r\n    for (let i = 0; i < values.length; i++) {\r\n        let value = values[i];\r\n\r\n        if (!pred(...(Array.isArray(value) ? value : [value]))) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\n/**\r\n * Verifies that exactly one value satisfies the condition\r\n * @param {*[]} values Set of values\r\n * @param {Function} pred Condition\r\n * @returns {boolean} A value indicating whether exactly one value satisfies the condition\r\n * @memberof STD\r\n */\r\nexport const one = function (values, pred) {\r\n    return getHitCount(values, pred) === 1;\r\n};\r\n\r\n/**\r\n * Verifies that no value satisfies the condition\r\n * @param {*[]} values Set of values\r\n * @param {Function} pred Condition\r\n * @returns {boolean} A value indicating whether no value satisfies the condition\r\n * @memberof STD\r\n */\r\nexport const no = function (values, pred) {\r\n    return getHitCount(values, pred) === 0;\r\n};\r\n\r\n/**\r\n * Verifies that at most one value satisfies the condition\r\n * @param {*[]} values Set of values\r\n * @param {Function} pred Condition\r\n * @returns {boolean} A value indicating whether at most one value satisfies the condition\r\n * @memberof STD\r\n */\r\nexport const lone = function (values, pred) {\r\n    return getHitCount(values, pred) <= 1;\r\n};\r\n\r\n/**\r\n * \r\n * @param {*} values \r\n * @param {*} pred \r\n * @private\r\n */\r\n/* istanbul ignore next */\r\nfunction getHitCount(values, pred) {\r\n    var counter = 0;\r\n\r\n    for (let i = 0; i < values.length; i++) {\r\n        let value = values[i];\r\n\r\n        if (pred(...(Array.isArray(value) ? value : [value]))) {\r\n            counter++;\r\n        }\r\n    }\r\n\r\n    return counter;\r\n}","import { isNullOrUndefined, isString, isIterable, hasOwn, pascalCase, isEmpty, all, some } from '@std/index.js';\r\nimport { windowWidth, windowHeight } from './dom-stat.js';\r\n\r\n/* istanbul ignore next */\r\nconst isElementNode = (obj) => !isNullOrUndefined(obj) && obj.nodeType === Node.ELEMENT_NODE;\r\n\r\n/* istanbul ignore next */\r\nconst isDocumentFragmentNode = (obj) => !isNullOrUndefined(obj) && obj.nodeType === Node.DOCUMENT_FRAGMENT_NODE;\r\n\r\n/**\r\n * Verifies that an object is a *Node*\r\n * @param {Element} obj \r\n * @returns {boolean} Value indicating whether the object is an *Node*\r\n * @memberof DOM\r\n */\r\nexport const isNode = (obj) => obj instanceof Node;\r\n\r\n/**\r\n * Verifies that an object is a *NodeList*\r\n * @param {Element} obj \r\n * @returns {boolean} Value indicating whether the object is an *NodeList*\r\n * @memberof DOM\r\n */\r\nexport const isNodeList = (obj) => obj instanceof NodeList;\r\n\r\n/**\r\n * Verifies that an object is an *Element*\r\n * @param {Element} obj \r\n * @returns {boolean} Value indicating whether the object is an *Element*\r\n * @memberof DOM\r\n */\r\nexport const isElement = (obj) => isElementNode(obj) && obj instanceof Element;\r\n\r\n/**\r\n * Verifies that an object is an *HTML Element*\r\n * @param {Element} obj \r\n * @param {string|string[]|string[][]} [kind] \r\n * @returns {boolean} Value indicating whether the object is an *HTMLElement*\r\n * @memberof DOM\r\n */\r\nexport const isHTMLElement = (obj, kind) => {\r\n    if (!(isElementNode(obj) && obj instanceof HTMLElement)) {\r\n        return false;\r\n    }\r\n\r\n    if (isIterable(kind)) {\r\n        return isHTMLElementKind(obj, Array.isArray(kind) ? kind : [kind]);\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nconst TagNameMapping = {\r\n    'a': \"Anchor\",\r\n    'br': \"BR\",\r\n    'dl': \"DList\",\r\n    'datalist': \"DataList\",\r\n    'fieldset': \"FieldSet\",\r\n    'frameset': \"FrameSet\",\r\n    'hr': \"HR\",\r\n    'h1': \"Heading\",\r\n    'h2': \"Heading\",\r\n    'h3': \"Heading\",\r\n    'h4': \"Heading\",\r\n    'h5': \"Heading\",\r\n    'h6': \"Heading\",\r\n    'li': \"LI\",\r\n    'ol': \"OList\",\r\n    'optgroup': \"OptGroup\",\r\n    'p': \"Paragraph\",\r\n    'q': \"Quote\",\r\n    'blockquote': \"Quote\",\r\n    'caption': \"TableCaption\",\r\n    'td': \"TableCell\",\r\n    'th': \"TableCell\",\r\n    'col': \"TableCol\",\r\n    'tr': \"TableRow\",\r\n    'tbody': \"TableSection\",\r\n    'thead': \"TableSection\",\r\n    'tfoot': \"TableSection\",\r\n    'textarea': \"TextArea\",\r\n    'ul': \"UList\",\r\n};\r\n\r\n/**\r\n * Verifies the tag of an *HTML Element*\r\n * @param {HTMLElement} element \r\n * @param {string[]|string[][]} kinds\r\n * @returns {boolean}\r\n */\r\nfunction isHTMLElementKind(element, kinds) {\r\n    const isInstanceOf = (obj) => element instanceof obj;\r\n    const hasTag = (tag) => element.tagName === tag.toUpperCase();\r\n    const isOfType = (type) => Array.isArray(type) ? type.includes(element.type) : element.type === type;\r\n\r\n    some(kinds, (kind) => {\r\n        if (!isIterable(kind)) {\r\n            return false;\r\n        }\r\n\r\n        var name = kind;\r\n        var type = null;\r\n        if (Array.isArray(kind)) {\r\n            [name, type] = kind;\r\n        }\r\n\r\n        var interfaceName = `HTML${hasOwn(TagNameMapping, name) ? TagNameMapping[name] : pascalCase(name)}Element`;\r\n\r\n        if (!(isInstanceOf(window[interfaceName]) || hasTag(name))) {\r\n            return false;\r\n        }\r\n\r\n        if (isIterable(type) && !isEmpty(type)) {\r\n            return isOfType(type);\r\n        }\r\n\r\n        return true;\r\n    });\r\n}\r\n\r\n/**\r\n * Verifies that an object is an *HTMLCollection*\r\n * @param {Element} obj \r\n * @returns {boolean} Value indicating whether the object is an *HTMLCollection*\r\n * @memberof DOM\r\n */\r\nexport const isHTMLCollection = (obj) => obj instanceof HTMLCollection;\r\n\r\n/**\r\n * Verifies that an object is an *DocumentFragment*\r\n * @param {Element} obj \r\n * @returns {boolean} Value indicating whether the object is an *DocumentFragment*\r\n * @memberof DOM\r\n */\r\nexport const isDocumentFragment = (obj) => isDocumentFragmentNode(obj) && obj instanceof DocumentFragment;\r\n\r\n/**\r\n * Creates a template with content\r\n * @param {string} html \r\n * @returns {HTMLTemplateElement}\r\n * @private\r\n */\r\n/* istanbul ignore next */\r\nfunction createTemplate(html) {\r\n    var template = document.createElement('template');\r\n    template.innerHTML = html.trim();\r\n\r\n    return template.content;\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction _htmlToElement(prop, html) {\r\n    if (!isString(html)) {\r\n        return null;\r\n    }\r\n\r\n    var template = createTemplate(html);\r\n\r\n    return template[prop];\r\n}\r\n\r\n/**\r\n * Converts an html string to an HTML Element\r\n * @param {!string} html \r\n * @returns {Node}\r\n * @memberof DOM\r\n */\r\nexport const htmlToElement = _htmlToElement.bind('firstChild');\r\n\r\n/**\r\n * Converts an html string to a list of HTML Elements\r\n * @param {!string} html \r\n * @returns {NodeList}\r\n * @memberof DOM\r\n */\r\nexport const htmlToElements = _htmlToElement.bind('childNodes');\r\n\r\n/**\r\n * Verifies that an element is visible\r\n * @param {!HTMLElement} element \r\n * @returns {boolean}\r\n * @memberof DOM\r\n */\r\nexport function isInViewport(element) {\r\n    if (!isHTMLElement(element)) {\r\n        throw new Error(\"The given element is not a valid HTML Element\");\r\n    }\r\n\r\n    var { top, right, bottom, left } = element.getBoundingClientRect();\r\n\r\n    return top >= 0 && left >= 0 && bottom <= windowHeight() && right <= windowWidth();\r\n}\r\n\r\n/**\r\n * Verifies that an element is displayed inside a target element\r\n * @param {!HTMLElement} element \r\n * @param {!HTMLElement} target\r\n * @returns {boolean}\r\n * @memberof DOM\r\n */\r\nexport function isInElement(element, target) {\r\n    if (!all([element, target], isHTMLElement)) {\r\n        throw new Error(\"The given element is not a valid HTML Element\");\r\n    }\r\n\r\n    var { top: top1, right: right1, bottom: bottom1, left: left1 } = element.getBoundingClientRect();\r\n    var { top: top2, right: right2, bottom: bottom2, left: left2 } = target.getBoundingClientRect();\r\n\r\n    return all([[top2, top1], [left2, left1], [right1, right2], [bottom1, bottom2]], (inner, outer) => inner <= outer);\r\n}","import { isNullOrWhitespace } from \"./std-parse.js\";\r\nimport { hasOwn } from \"./std-object.js\";\r\n\r\n/**\r\n * Capitalizes all words in a sequence\r\n * @param {string} str Sequence\r\n * @returns {string} Capitalized sequence\r\n * @memberof STD\r\n */\r\nexport function capitalize(str) {\r\n    return str.toLowerCase().replace(/\\b\\w/g, (s) => s.toUpperCase());\r\n}\r\n\r\n/**\r\n * Capitalizes the first letter of a sequence\r\n * @param {string} str Sequence\r\n * @returns {string} Sequence with its first letter capitalized\r\n * @memberof STD\r\n */\r\nexport function capitalizeFirstLetter(str) {\r\n    return isNullOrWhitespace(str) ? str : str.charAt(0).toUpperCase() + str.slice(1);\r\n}\r\n\r\nconst CaseHandler = {\r\n    'camel': (str) => camelCase(str),\r\n    'pascal': (str) => pascalCase(str),\r\n    'upper': (str) => str.toUpperCase(),\r\n    'lower': (str) => str.toLowerCase(),\r\n};\r\n\r\n/**\r\n * Format a sequence according to a specified case\r\n * @param {!string} str Sequence\r\n * @param {!string} casing Sequence\r\n * @returns {string} Formatted sequence\r\n * @memberof STD\r\n */\r\nexport function formatCase(str, casing) {\r\n    if (isNullOrWhitespace(str)) {\r\n        return str;\r\n    }\r\n    if (!hasOwn(CaseHandler, casing)) {\r\n        return str;\r\n    }\r\n\r\n    return CaseHandler[casing](str);\r\n}\r\n\r\n/**\r\n * Capitalizes all words in a sequence except the first one and \r\n * removes spaces or punctuation\r\n * @param {!string} str Sequence\r\n * @returns {string} camelCased sequence\r\n * @memberof STD\r\n */\r\nexport function camelCase(str) {\r\n    if (isNullOrWhitespace(str)) {\r\n        return str;\r\n    }\r\n\r\n    var ccString = pascalCase(str);\r\n\r\n    return ccString.charAt(0).toLowerCase() + ccString.slice(1);\r\n}\r\n\r\n/**\r\n * Capitalizes all words in a sequence and removes spaces or punctuation\r\n * @param {!string} str Sequence\r\n * @returns {string} PascalCased sequence\r\n * @memberof STD\r\n */\r\nexport function pascalCase(str) {\r\n    if (isNullOrWhitespace(str)) {\r\n        return str;\r\n    }\r\n\r\n    var ccString = str.replace(/[_-]+/g, \" \").replace(/\\s+/g, ' ').trim();\r\n\r\n    return capitalize(ccString).replace(/\\s+/g, '');\r\n}\r\n\r\n/**\r\n * Removes all accents from a string\r\n * @param {!string} str A string\r\n * @returns {string} A string without accents\r\n * @memberof STD\r\n */\r\nexport function removeAccents(str) {\r\n    if (String.prototype.normalize) {\r\n        return str.normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\");\r\n    }\r\n\r\n    return str.replace(/[àâäæ]/gi, 'a')\r\n        .replace(/[ç]/gi, 'c')\r\n        .replace(/[éèê]/gi, 'e')\r\n        .replace(/[îï]/gi, 'i')\r\n        .replace(/[ôœ]/gi, 'o')\r\n        .replace(/[ùûü]/gi, 'u');\r\n}","import { isNullOrWhitespace, isNullOrUndefined } from '@std/index.js';\r\nimport { isHTMLElement } from './dom-parse.js';\r\n\r\n/**\r\n * Removes additional spaces in class attribute\r\n * @param {string} c class attribute's value\r\n * @returns {string} formatted value\r\n * @private\r\n */\r\nconst formatClass = (c) => c.replace(/\\s+/g, ' ').trim();\r\n\r\n/**\r\n * Transform a raw value to a valid class value\r\n * @param {string} c raw value\r\n * @returns {string} parsed value\r\n * @private\r\n */\r\nconst parseClass = (c) => {\r\n    if (isNullOrUndefined(c)) {\r\n        return \"\";\r\n    } else if (Array.isArray(c)) {\r\n        return c.join(' ');\r\n    }\r\n\r\n    return c.toString();\r\n};\r\n\r\n/**\r\n * Verifies that an element has a class\r\n * @param {!HTMLElement} element element\r\n * @param {string} className class\r\n * @returns {boolean} value indicating whether the element has the class\r\n * @memberof DOM\r\n */\r\nexport function hasClass(element, className) {\r\n    if (!isHTMLElement(element)) {\r\n        throw new Error(\"The given element is not a valid HTML Element\");\r\n    }\r\n\r\n    return element.className.split(\" \").includes(className);\r\n}\r\n\r\n/**\r\n * Removes a class from an element if it exists\r\n * @param {!HTMLElement} element element\r\n * @param {string|Array} attrClass class\r\n * @memberof DOM\r\n */\r\nexport function removeClass(element, attrClass) {\r\n    if (!isHTMLElement(element)) {\r\n        throw new Error(\"The given element is not a valid HTML Element\");\r\n    }\r\n\r\n    const remove = function (el, c) {\r\n        if (hasClass(el, c)) {\r\n            el.className = el.className.replace(c, '');\r\n        }\r\n    };\r\n\r\n    if (Array.isArray(attrClass)) {\r\n        attrClass.forEach((val) => remove(element, val));\r\n    } else {\r\n        remove(element, attrClass);\r\n    }\r\n\r\n    element.className = formatClass(element.className);\r\n\r\n    return element;\r\n}\r\n\r\n/**\r\n * Adds one or many classes to an element if it doesn't exist\r\n * @param {!HTMLElement} element Element\r\n * @param {string|string[]} attrClass classes\r\n * @returns {HTMLElement} the element\r\n * @memberof DOM\r\n */\r\nexport function addClass(element, attrClass) {\r\n    if (!isHTMLElement(element)) {\r\n        throw new Error(\"The given element is not a valid HTML Element\");\r\n    }\r\n\r\n    var parsedClass = parseClass(attrClass);\r\n\r\n    if (isNullOrWhitespace(element.className)) {\r\n        element.className = parsedClass;\r\n    } else if (!hasClass(element, parsedClass)) {\r\n        element.className += \" \" + parsedClass;\r\n    }\r\n\r\n    element.className = formatClass(element.className);\r\n\r\n    return element;\r\n}\r\n\r\n/**\r\n * Adds or removes a class from an element depending on the class's presence.\r\n * @param {!HTMLElement} element \r\n * @param {string} attrClass ClassName\r\n * @returns {HTMLElement} the element\r\n * @memberof DOM\r\n */\r\nexport function toggleClass(element, attrClass) {\r\n    if (!isHTMLElement(element)) {\r\n        throw new Error(\"The given element is not a valid HTML Element\");\r\n    }\r\n\r\n    if (hasClass(element, attrClass)) {\r\n        removeClass(element, attrClass);\r\n    } else {\r\n        addClass(element, attrClass);\r\n    }\r\n\r\n    return element;\r\n}\r\n\r\n/**\r\n * Sets classes to an element\r\n * @param {!HTMLElement} element \r\n * @param {string|string[]} attrClass classes \r\n * @returns {HTMLElement} the element\r\n * @memberof DOM\r\n */\r\nexport function setClass(element, attrClass) {\r\n    if (!isHTMLElement(element)) {\r\n        throw new Error(\"The given element is not a valid HTML Element\");\r\n    }\r\n\r\n    element.className = formatClass(parseClass(attrClass));\r\n\r\n    return element;\r\n}","import { isObject, isNullOrUndefined } from '@std/index.js';\r\nimport { isHTMLElement } from './dom-parse.js';\r\nimport { setClass } from './element-class-manip.js';\r\n\r\n/* istanbul ignore next */\r\nfunction echo(o) { }\r\n\r\n\r\n/**\r\n * Sets the attributes of an element\r\n * @param {!HTMLElement} element element\r\n * @param {Object} attribute attribute\r\n * @returns {HTMLElement}\r\n * @memberof DOM\r\n */\r\nexport function addAttributes(element, attribute) {\r\n    if (!isHTMLElement(element)) {\r\n        throw new Error(\"The given element parameter is not a valid HTML Element\");\r\n    }\r\n\r\n    if (!isObject(attribute)) {\r\n        return element;\r\n    }\r\n\r\n    const ATTR_MAP = {\r\n        // Global attributes\r\n        accesskey: [assign, 'accessKey'],\r\n        class: [setClass, element],\r\n        data: [Object.assign, element.dataset],\r\n        editable: [assign, 'contentEditable'],\r\n        draggable: [assign],\r\n        hidden: [assign],\r\n        id: [assign],\r\n        lang: [assign],\r\n        html: [assign, 'innerHTML'],\r\n        style: [assign],\r\n        target: [assign],\r\n        tabindex: [assign, 'tabIndex'],\r\n        text: [assign, 'textContent'],\r\n        title: [assign],\r\n        // Quote attributes\r\n        cite: [assign],\r\n        // Anchor attributes\r\n        href: [assign],\r\n        // Link attributes\r\n        alt: [assign],\r\n        src: [assign],\r\n        // Form attributes\r\n        accept: [assign],\r\n        disabled: [assign],\r\n        placeholder: [assign],\r\n        readonly: [assign, 'readOnly'],\r\n        value: [assign],\r\n    };\r\n    const DEFAULT_MAP = [echo, ''];\r\n\r\n    // HTML attributes\r\n    for (const key of Object.keys(attribute)) {\r\n        var val = ATTR_MAP[key] || DEFAULT_MAP;\r\n        val[0](val[1] || key, attribute[key]);\r\n    }\r\n\r\n    function assign(key, val) {\r\n        element[key] = val;\r\n    }\r\n\r\n    return element;\r\n}\r\n\r\n/**\r\n * Changes the selected option of a `<select>` element\r\n * @param {!HTMLSelectElement} select\r\n * @param {string} value option value to select\r\n * @returns {boolean} value indicating whether the option was found and selected\r\n * @memberof DOM\r\n */\r\nexport function changeSelectValue(select, value) {\r\n    if (!isHTMLElement(select, \"select\")) {\r\n        throw new Error(\"The given select parameter is not a valid HTML Select element\");\r\n    }\r\n\r\n    if (isNullOrUndefined(value)) {\r\n        throw new Error(\"The given value parameter is a null or undefined\");\r\n    }\r\n\r\n    var options = select.options;\r\n    for (let i = 0; i < options.length; i++) {\r\n        let option = options[i];\r\n\r\n        if (option.value === value.toString()) {\r\n            option.selected = true;\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}","import { isNullOrUndefined } from \"@std/index.js\";\r\nimport { isNode, isHTMLElement } from \"./dom-parse.js\";\r\nimport { appendChildren } from \"./dom-append.js\";\r\nimport { addAttributes } from \"./element-manip.js\";\r\n\r\n/**\r\n * Creates an element\r\n * @param {string} tagName \r\n * @param {object} [_attribute] \r\n * @param {Text|HTMLElement|HTMLElement[]} [_children] \r\n * @returns {HTMLElement}\r\n * @private\r\n */\r\n/* istanbul ignore next */\r\nfunction create(tagName, _attribute, _children) {\r\n    var element = document.createElement(tagName);\r\n\r\n    if (!isNullOrUndefined(_attribute)) {\r\n        addAttributes(element, _attribute);\r\n    }\r\n\r\n    if (!isNullOrUndefined(_children)) {\r\n        addContent(element, _children);\r\n    }\r\n\r\n    return element;\r\n}\r\n\r\n/**\r\n * Creates a document fragment\r\n * @function createDocFragment\r\n * @returns {DocumentFragment}\r\n * @memberof DOM\r\n */\r\nexport function createDocFragment(_children) {\r\n    var fragment = document.createDocumentFragment();\r\n\r\n    if (!isNullOrUndefined(_children)) {\r\n        addContent(fragment, _children);\r\n    }\r\n\r\n    return fragment;\r\n}\r\n\r\n/**\r\n * Creates a text node\r\n * @function createTextNode\r\n * @param {string} text\r\n * @returns {Text}\r\n * @memberof DOM\r\n */\r\nexport const createTextNode = (text) => document.createTextNode(text);\r\n\r\n/**\r\n * Creates a `<link>` element with some attributes\r\n * @param {string} href \r\n * @param {string} rel \r\n * @returns {HTMLLinkElement}\r\n * @memberof DOM\r\n */\r\nexport function createLink(href, rel) {\r\n    var link = create(\"link\");\r\n\r\n    if (href) {\r\n        link.href = href;\r\n    }\r\n\r\n    if (rel) {\r\n        link.rel = rel;\r\n    }\r\n\r\n    return link;\r\n}\r\n\r\n/**\r\n * Creates a `<template>` element with some attributes\r\n * @function createTemplate\r\n * @param {object} _attribute Global attributes\r\n * @param {Text|HTMLElement|HTMLElement[]} _children Content\r\n * @returns {HTMLTemplateElement}\r\n * @memberof DOM\r\n */\r\nexport const createTemplate = create.bind(null, 'template');\r\n\r\n/**\r\n * Creates a `<header>` element with some attributes\r\n * @function createHeader\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLElement}\r\n * @memberof DOM\r\n */\r\nexport const createHeader = create.bind(null, 'header');\r\n\r\n/**\r\n * Creates an `<footer>` element with some attributes\r\n * @function createFooter\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLElement}\r\n * @memberof DOM\r\n */\r\nexport const createFooter = create.bind(null, 'footer');\r\n\r\n/**\r\n * Creates an `<main>` element with some attributes\r\n * @function createMain\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLElement}\r\n * @memberof DOM\r\n */\r\nexport const createMain = create.bind(null, 'main');\r\n\r\n/**\r\n * Creates an `<article>` element with some attributes\r\n * @function createArticle\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLElement}\r\n * @memberof DOM\r\n */\r\nexport const createArticle = create.bind(null, 'article');\r\n\r\n/**\r\n * Creates an `<section>` element with some attributes\r\n * @function createSection\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLElement}\r\n * @memberof DOM\r\n */\r\nexport const createSection = create.bind(null, 'section');\r\n\r\n/**\r\n * Creates an `<nav>` element with some attributes\r\n * @function createNav\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLElement}\r\n * @memberof DOM\r\n */\r\nexport const createNav = create.bind(null, 'nav');\r\n\r\n/**\r\n * Creates an `<aside>` element with some attributes\r\n * @function createAside\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLElement}\r\n * @memberof DOM\r\n */\r\nexport const createAside = create.bind(null, 'aside');\r\n\r\n/**\r\n * Creates a `<h1>` element with some attributes\r\n * @function createH1\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLHeadingElement}\r\n * @memberof DOM\r\n */\r\nexport const createH1 = create.bind(null, 'h1');\r\n\r\n/**\r\n * Creates a `<h2>` element with some attributes\r\n * @function createH2\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLHeadingElement}\r\n * @memberof DOM\r\n */\r\nexport const createH2 = create.bind(null, 'h2');\r\n\r\n/**\r\n * Creates a `<h3>` element with some attributes\r\n * @function createH3\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLHeadingElement}\r\n * @memberof DOM\r\n */\r\nexport const createH3 = create.bind(null, 'h3');\r\n\r\n/**\r\n * Creates a `<h4>` element with some attributes\r\n * @function createH4\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLHeadingElement}\r\n * @memberof DOM\r\n */\r\nexport const createH4 = create.bind(null, 'h4');\r\n\r\n/**\r\n * Creates a `<h5>` element with some attributes\r\n * @function createH5\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLHeadingElement}\r\n * @memberof DOM\r\n */\r\nexport const createH5 = create.bind(null, 'h5');\r\n\r\n/**\r\n * Creates a `<h6>` element with some attributes\r\n * @function createH6\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLHeadingElement}\r\n * @memberof DOM\r\n */\r\nexport const createH6 = create.bind(null, 'h6');\r\n\r\n/**\r\n * Creates a `<div>` element with some attributes\r\n * @function createDiv\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLDivElement}\r\n * @memberof DOM\r\n */\r\nexport const createDiv = create.bind(null, 'div');\r\n\r\n/**\r\n * Creates a `br` element \\\r\n * Line break (carriage-return)\r\n * @function createLineBreak\r\n * @returns {HTMLBRElement}\r\n * @memberof DOM\r\n */\r\nexport const createLineBreak = () => create('br');\r\n\r\n/**\r\n * Creates a `hr` element \\\r\n * Thematic break\r\n * @function createThematicBreak\r\n * @returns {HTMLHRElement}\r\n * @memberof DOM\r\n */\r\nexport const createThematicBreak = () => create('hr');\r\n\r\n/**\r\n * Creates a `<p>` element with some attributes\r\n * @function createParagraph\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLParagraphElement}\r\n * @memberof DOM\r\n */\r\nexport const createParagraph = create.bind(null, 'p');\r\n\r\n\r\n/**\r\n * Creates a `<blockquote>` element with some attributes\r\n * @function createBlockQuotation\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLQuoteElement}\r\n * @memberof DOM\r\n */\r\nexport const createBlockQuotation = create.bind(null, 'blockquote');\r\n\r\n/**\r\n * Creates a `<ul>` element with some attributes\r\n * @function createUnorderedList\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLUListElement}\r\n * @memberof DOM\r\n */\r\nexport const createUnorderedList = create.bind(null, 'ul');\r\n\r\n/**\r\n * Creates a `<ol>` element with some attributes\r\n * @function createOrderedList\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLOListElement}\r\n * @memberof DOM\r\n */\r\nexport const createOrderedList = create.bind(null, 'ol');\r\n\r\n/**\r\n * Creates a `<li>` element with some attributes\r\n * @function createListItem\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLLIElement}\r\n * @memberof DOM\r\n */\r\nexport const createListItem = create.bind(null, 'li');\r\n\r\n/**\r\n * Creates a `<dl>` element with some attributes\r\n * @function createDescriptionList\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLDListElement}\r\n * @memberof DOM\r\n */\r\nexport const createDescriptionList = create.bind(null, 'dl');\r\n\r\n/**\r\n * Creates a `<dt>` element with some attributes\r\n * @function createDescriptionTerm\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLElement}\r\n * @memberof DOM\r\n */\r\nexport const createDescriptionTerm = create.bind(null, 'dt');\r\n\r\n/**\r\n * Creates a `<dd>` element with some attributes\r\n * @function createDescriptionDetails\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLElement}\r\n * @memberof DOM\r\n */\r\nexport const createDescriptionDetails = create.bind(null, 'dd');\r\n\r\n// Inline Element\r\n\r\n/**\r\n * Creates an `<a>` element with some attributes\r\n * @param {string} href URL or a URL fragment that the hyperlink points to\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLAnchorElement}\r\n * @memberof DOM\r\n */\r\nexport function createAnchor(href, _attribute, _children) {\r\n    var a = create('a', _attribute, _children);\r\n\r\n    if (href) {\r\n        a.href = href;\r\n    }\r\n\r\n    return a;\r\n}\r\n\r\n/**\r\n  * Creates a `<img>` element with some attributes\r\n  * @param {string} src\r\n  * @param {string} alt\r\n  * @param {object} _attribute \r\n  * @param {Text|HTMLElement|HTMLElement[]} _children \r\n  * @returns {HTMLImageElement}\r\n  * @memberof DOM\r\n  */\r\nexport function createImage(src, alt, _attribute) {\r\n    var img = create('img', _attribute);\r\n\r\n    if (src) {\r\n        img.src = src;\r\n    }\r\n\r\n    if (alt) {\r\n        img.alt = alt;\r\n    }\r\n\r\n    return img;\r\n}\r\n\r\n/**\r\n  * Creates a `<audio>` element with some attributes\r\n  * @param {string} src\r\n  * @param {object} attribute \r\n  * @param {Text|HTMLElement|HTMLElement[]} children \r\n  * @returns {HTMLAudioElement}\r\n  * @memberof DOM\r\n  */\r\nexport function createAudio(src, attribute, children) {\r\n    var audio = create('audio', attribute, children);\r\n\r\n    if (src) {\r\n        audio.src = src;\r\n    }\r\n\r\n    return audio;\r\n}\r\n\r\n/**\r\n  * Creates a `<video>` element with some attributes\r\n  * @param {string} src\r\n  * @param {object} attribute \r\n  * @param {Text|HTMLElement|HTMLElement[]} children \r\n  * @returns {HTMLVideoElement}\r\n  * @memberof DOM\r\n  */\r\nexport function createVideo(src, attribute, children) {\r\n    var video = create('video', attribute, children);\r\n\r\n    if (src) {\r\n        video.src = src;\r\n    }\r\n\r\n    return video;\r\n}\r\n\r\n/**\r\n * Creates a `<source>` element with some attributes\r\n * @function createSource\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLSourceElement}\r\n * @memberof DOM\r\n */\r\nexport const createSource = create.bind(null, \"source\");\r\n\r\n/**\r\n * Creates a `<picture>` element with some attributes\r\n * @function createPicture\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLPictureElement}\r\n * @memberof DOM\r\n */\r\nexport const createPicture = create.bind(null, \"picture\");\r\n\r\n/**\r\n * Creates a `<figure>` element with some attributes\r\n * @function createFigure\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLElement}\r\n * @memberof DOM\r\n */\r\nexport const createFigure = create.bind(null, \"figure\");\r\n\r\n/**\r\n * Creates a `<figcaption>` element with some attributes\r\n * @function createFigureCaption\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLElement}\r\n * @memberof DOM\r\n */\r\nexport const createFigureCaption = create.bind(null, \"figcaption\");\r\n\r\n/**\r\n * Creates a `<span>` element with some attributes\r\n * @function createSpan\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLSpanElement}\r\n * @memberof DOM\r\n */\r\nexport const createSpan = create.bind(null, \"span\");\r\n\r\n/**\r\n * Creates a `<strong>` element with some attributes\r\n * @function createStrong\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLElement}\r\n * @memberof DOM\r\n */\r\nexport const createStrong = create.bind(null, \"strong\");\r\n\r\n/**\r\n * Creates a `<em>` element with some attributes\r\n * @function createEmphasis\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLElement}\r\n * @memberof DOM\r\n */\r\nexport const createEmphasis = create.bind(null, \"em\");\r\n\r\n/**\r\n * Creates a `<mark>` element with some attributes\r\n * @function createMark\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLElement}\r\n * @memberof DOM\r\n */\r\nexport const createMark = create.bind(null, \"mark\");\r\n\r\n/**\r\n * Creates a `<samp>` element with some attributes\r\n * @function createSample\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLElement}\r\n * @memberof DOM\r\n */\r\nexport const createSample = create.bind(null, \"samp\");\r\n\r\n/**\r\n * Creates a `<sub>` element with some attributes\r\n * @function createSubscript\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLElement}\r\n * @memberof DOM\r\n */\r\nexport const createSubscript = create.bind(null, \"sub\");\r\n\r\n/**\r\n * Creates a `<sup>` element with some attributes\r\n * @function createSuperscript\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLElement}\r\n * @memberof DOM\r\n */\r\nexport const createSuperscript = create.bind(null, \"sup\");\r\n\r\n/**\r\n * Creates a `<q>` element with some attributes\r\n * @function createQuote\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLQuoteElement}\r\n * @memberof DOM\r\n */\r\nexport function createQuote(cite, _attribute, children) {\r\n    var quote = create('q', _attribute, children);\r\n\r\n    if (cite) {\r\n        quote.cite = cite;\r\n    }\r\n\r\n    return quote;\r\n}\r\n\r\n/**\r\n * Creates a `<abbr>` element with some attributes\r\n * @function createAbbreviation\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLElement}\r\n * @memberof DOM\r\n */\r\nexport const createAbbreviation = create.bind(null, \"abbr\");\r\n\r\n/**\r\n * Creates a `<b>` element with some attributes\r\n * @function createB\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLElement}\r\n * @memberof DOM\r\n */\r\nexport const createB = create.bind(null, \"b\");\r\n\r\n/**\r\n * Creates a `<i>` element with some attributes\r\n * @function createI\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLElement}\r\n * @memberof DOM\r\n */\r\nexport const createI = create.bind(null, \"i\");\r\n\r\n/**\r\n * Creates a `<s>` element with some attributes\r\n * @function createS\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLElement}\r\n * @memberof DOM\r\n */\r\nexport const createS = create.bind(null, 's');\r\n\r\n/**\r\n * Creates a `<u>` element with some attributes\r\n * @function createU\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLElement}\r\n * @memberof DOM\r\n */\r\nexport const createU = create.bind(null, 'u');\r\n\r\n/**\r\n * Creates a `<cite>` element with some attributes\r\n * @function createCite\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLElement}\r\n * @memberof DOM\r\n */\r\nexport const createCite = create.bind(null, \"cite\");\r\n\r\n/**\r\n * Creates a `<time>` element with optionally some attributes\r\n * @param {string} datetime \r\n * @param {object} attribute \r\n * @returns {HTMLTimeElement}\r\n * @memberof DOM\r\n */\r\nexport function createTime(datetime, _attribute) {\r\n    var element = create('time', _attribute);\r\n\r\n    if (datetime) {\r\n        element.datetime = datetime;\r\n    }\r\n\r\n    return element;\r\n}\r\n\r\n/**\r\n * Creates a `<code>` element with some attributes\r\n * @function createCode\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLElement}\r\n * @memberof DOM\r\n */\r\nexport const createCode = create.bind(null, \"code\");\r\n\r\n/**\r\n * Creates a `<form>` element with some attributes\r\n * @function createForm\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLLabelElement}\r\n * @memberof DOM\r\n */\r\nexport const createForm = create.bind(null, 'form');\r\n\r\nconst inputTypes = [\"button\", \"checkbox\", \"color\", \"date\", \"datetime-local\", \"email\", \"file\",\r\n    \"hidden\", \"image\", \"month\", \"number\", \"password\", \"radio\", \"range\", \"reset\",\r\n    \"search\", \"submit\", \"tel\", \"text\", \"time\", \"url\", \"week\"];\r\n\r\n/**\r\n * Creates an `<input>` element with a specified type and \r\n * optionally some attributes\r\n * @param {string} type\r\n * @param {object} _attribute \r\n * @memberof DOM\r\n */\r\nexport function createInputAs(type, _attribute) {\r\n    if (!inputTypes.includes(type)) {\r\n        return null;\r\n    }\r\n\r\n    var input = create('input', _attribute);\r\n    input.type = type;\r\n\r\n    return input;\r\n}\r\n\r\n/**\r\n * Creates an `<input>` element with some attributes\r\n * @function createInput\r\n * @param {object} _attribute \r\n * @returns {HTMLInputElement}\r\n * @memberof DOM\r\n */\r\nexport const createInput = createInputAs.bind(null, \"text\");\r\n\r\n/**\r\n * Creates a `<label>` element with some attributes\r\n * @function createLabel\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLLabelElement}\r\n * @memberof DOM\r\n */\r\nexport const createLabel = create.bind(null, 'label');\r\n\r\n/**\r\n * Creates a `<fieldset>` element with some attributes\r\n * @function createFieldset\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLLabelElement}\r\n * @memberof DOM\r\n */\r\nexport const createFieldset = create.bind(null, 'fieldset');\r\n\r\n/**\r\n * Creates a `<legend>` element with some attributes\r\n * @function createLegend\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLLabelElement}\r\n * @memberof DOM\r\n */\r\nexport const createLegend = create.bind(null, 'legend');\r\n\r\n/**\r\n * Creates a `<datalist>` element with some attributes\r\n * @function createDataList\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLTextAreaElement}\r\n * @memberof DOM\r\n */\r\nexport const createDataList = create.bind(null, 'datalist');\r\n\r\n/**\r\n * Creates a `<select>` element with some attributes\r\n * @function createSelect\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLLabelElement}\r\n * @memberof DOM\r\n */\r\nexport const createSelect = create.bind(null, 'select');\r\n\r\n/**\r\n * Creates a `<option>` element with some attributes\r\n * @function createOption\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLLabelElement}\r\n * @memberof DOM\r\n */\r\nexport const createOption = create.bind(null, 'option');\r\n\r\n/**\r\n * Creates a `<optgroup>` element with some attributes\r\n * @function createOptionGroup\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLLabelElement}\r\n * @memberof DOM\r\n */\r\nexport const createOptionGroup = create.bind(null, 'optgroup');\r\n\r\n/**\r\n * Creates a `<textarea>` element with some attributes\r\n * @function createTextArea\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLTextAreaElement}\r\n * @memberof DOM\r\n */\r\nexport const createTextArea = create.bind(null, 'textarea');\r\n\r\n/**\r\n * Creates a `<meter>` element with some attributes\r\n * @function createMeter\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLTextAreaElement}\r\n * @memberof DOM\r\n */\r\nexport const createMeter = create.bind(null, 'meter');\r\n\r\n/**\r\n * Creates a `<progress>` element with some attributes\r\n * @function createProgress\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLTextAreaElement}\r\n * @memberof DOM\r\n */\r\nexport const createProgress = create.bind(null, 'progress');\r\n\r\n/**\r\n * Creates a `<output>` element with optionally some attributes and children elements\r\n * @function createOutput\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLTextAreaElement}\r\n * @memberof DOM\r\n */\r\nexport const createOutput = create.bind(null, 'output');\r\n\r\nconst buttonTypes = [\"button\", \"submit\", \"reset\"];\r\n\r\n/**\r\n * Creates a `<button>` element with a specified type and \r\n * optionally some attributes and children elements\r\n * @param {string} type\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @memberof DOM\r\n */\r\nexport function createButtonAs(type, _attribute, _children) {\r\n    if (!buttonTypes.includes(type)) {\r\n        return null;\r\n    }\r\n\r\n    var button = create(\"button\", _attribute, _children);\r\n    button.type = type;\r\n\r\n    return button;\r\n}\r\n\r\n/**\r\n * Creates a `<button>` element with some attributes\r\n * @function createButton\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @memberof DOM\r\n */\r\nexport const createButton = createButtonAs.bind(null, \"button\");\r\n\r\n/**\r\n * Creates a `<table>` element with some attributes\r\n * @function createTable\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLTableElement}\r\n * @memberof DOM\r\n */\r\nexport const createTable = create.bind(null, \"table\");\r\n\r\n/**\r\n * Creates a `<caption>` element with some attributes\r\n * @function createCaption\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLTableCaptionElement}\r\n * @memberof DOM\r\n */\r\nexport const createCaption = create.bind(null, \"caption\");\r\n\r\n/**\r\n * Creates a `<thead>` element with some attributes\r\n * @function createTableHeader\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLTableSectionElement}\r\n * @memberof DOM\r\n */\r\nexport const createTableHeader = create.bind(null, \"thead\");\r\n\r\n/**\r\n * Creates a `<tbody>` element with some attributes\r\n * @function createTableBody\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLTableSectionElement}\r\n * @memberof DOM\r\n */\r\nexport const createTableBody = create.bind(null, \"tbody\");\r\n\r\n/**\r\n * Creates a `<tfoot>` element with some attributes\r\n * @function createTableFooter\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLTableSectionElement}\r\n * @memberof DOM\r\n */\r\nexport const createTableFooter = create.bind(null, \"tfoot\");\r\n\r\n/**\r\n * Creates a `<col>` element with some attributes\r\n * @function createTableColumn\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLTableColElement}\r\n * @memberof DOM\r\n */\r\nexport const createTableColumn = create.bind(null, \"col\");\r\n\r\n/**\r\n * Creates a `<colgroup>` element with some attributes\r\n * @function createTableColumnGroup\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLTableColElement}\r\n * @memberof DOM\r\n */\r\nexport const createTableColumnGroup = create.bind(null, \"colgroup\");\r\n\r\n/**\r\n * Creates a `<tr>` element with some attributes\r\n * @function createTableRow\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLTableRowElement}\r\n * @memberof DOM\r\n */\r\nexport const createTableRow = create.bind(null, \"tr\");\r\n\r\n/**\r\n * Creates a `<th>` element with some attributes\r\n * @function createTableHeaderCell\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLTableCellElement}\r\n * @memberof DOM\r\n */\r\nexport const createTableHeaderCell = create.bind(null, \"th\");\r\n\r\n/**\r\n * Creates a `<td>` element with some attributes\r\n * @function createTableCell\r\n * @param {object} _attribute \r\n * @param {Text|HTMLElement|HTMLElement[]} _children \r\n * @returns {HTMLTableCellElement}\r\n * @memberof DOM\r\n */\r\nexport const createTableCell = create.bind(null, \"td\");\r\n\r\n/**\r\n * Appends the children to the element\r\n * @param {HTMLElement} element element\r\n * @param {HTMLCollection} children children elements\r\n * @private\r\n * @memberof DOM\r\n */\r\n/* istanbul ignore next */\r\nfunction addContent(element, children) {\r\n    if (!isHTMLElement(element)) {\r\n        throw new Error(\"The given element is not a valid HTML Element\");\r\n    }\r\n\r\n    if (isNullOrUndefined(children)) {\r\n        return element;\r\n    }\r\n\r\n    if (Array.isArray(children)) {\r\n        appendChildren(element, children);\r\n    } else if (isNode(children)) {\r\n        element.appendChild(children);\r\n    } else {\r\n        element.textContent = children.toString();\r\n    }\r\n\r\n    return element;\r\n}","import { isIterable, isString, all } from '@std/index.js';\r\nimport { isNode, isElement, isHTMLCollection } from './dom-parse.js';\r\n\r\n/**\r\n * Inserts a given element before the targetted element\r\n * @param {!HTMLElement} target \r\n * @param {!HTMLElement} element \r\n * @memberof DOM\r\n */\r\nexport function insertBeforeElement(target, element) {\r\n    if (!all([target, element], isElement)) {\r\n        throw new Error(\"The given element or target is not a valid HTML Element\");\r\n    }\r\n\r\n    target.insertAdjacentElement('beforebegin', element);\r\n\r\n    return target;\r\n}\r\n\r\n/**\r\n * Inserts a given element after the targetted element\r\n * @param {!HTMLElement} target \r\n * @param {!HTMLElement} element \r\n * @memberof DOM\r\n */\r\nexport function insertAfterElement(target, element) {\r\n    if (!all([target, element], isElement)) {\r\n        throw new Error(\"The given element or target is not a valid HTML Element\");\r\n    }\r\n\r\n    target.insertAdjacentElement('afterend', element);\r\n\r\n    return target;\r\n}\r\n\r\n/**\r\n * Inserts a givern element as the first children of the targetted element\r\n * @param {!HTMLElement} target \r\n * @param {!HTMLElement} element \r\n * @memberof DOM\r\n */\r\nexport function preprendChild(target, element) {\r\n    if (!all([target, element], isElement)) {\r\n        throw new Error(\"The given element or target is not a valid HTML Element\");\r\n    }\r\n\r\n    target.insertAdjacentElement('afterbegin', element);\r\n\r\n    return target;\r\n}\r\n\r\n/**\r\n * Append a list of elements to a node.\r\n * @param {Element} parent\r\n * @param {!HTMLElement[]|HTMLCollection} children\r\n * @returns {HTMLElement}\r\n * @memberof DOM\r\n */\r\nexport function appendChildren(parent, children) {\r\n    if (!isNode(parent)) {\r\n        throw new Error(\"The given parent is not a valid Node\");\r\n    }\r\n    \r\n    if (!isHTMLCollection(children) && !isIterable(children) || isString(children)) {\r\n        throw new Error(\"The given children is not a valid HTMLCollection/HTMLElement array\");\r\n    }\r\n\r\n    var fragment = document.createDocumentFragment();\r\n    \r\n    Array.from(children).forEach(element => {\r\n        fragment.appendChild(isNode(element) ? element : document.createTextNode(element.toString()));\r\n    });\r\n    parent.appendChild(fragment);\r\n\r\n    return parent;\r\n}","﻿import { isFunction, isNullOrUndefined, valOrDefault, isNullOrWhitespace } from '@std/index.js';\r\nimport { isElement } from './dom-parse.js';\r\n\r\n/**\r\n * Checks whether the selector represents a `class`\r\n * @returns {boolean}\r\n * @private\r\n */\r\nconst isClassSelector = (selector) => /^\\.[a-zA-Z0-9_-]+$/.test(selector);\r\n\r\n/**\r\n * Checks whether the selector represents an `id`\r\n * @returns {boolean}\r\n * @private\r\n */\r\nconst isIdSelector = (selector) => /^#[a-zA-Z0-9_-]+$/.test(selector);\r\n\r\n/**\r\n * Returns the first element within the specified container that matches the \r\n * specified selector, group or selectors.\r\n * @param {!string} selector A DOMString containing one or more selectors to match\r\n * @param {HTMLElement|DocumentFragment} [_container] Container queried\r\n * @returns {HTMLElement|null} The first element matches that matches the specified set of CSS selectors.\r\n * @memberof DOM\r\n */\r\nexport function getElement(selector, _container) {\r\n    var container = valOrDefault(_container, document);\r\n\r\n    if (isNullOrWhitespace(selector)) {\r\n        return null;\r\n    }\r\n\r\n    if (container instanceof DocumentFragment) {\r\n        return container.querySelector(selector);\r\n    }\r\n\r\n    if (isIdSelector(selector)) {\r\n        return document.getElementById(selector.substring(1));\r\n    }\r\n\r\n    if (isClassSelector(selector)) {\r\n        return container.getElementsByClassName(selector.substring(1))[0];\r\n    }\r\n\r\n    return container.querySelector(selector);\r\n}\r\n\r\n/**\r\n * Returns all elements that match the selector query.\r\n * @param {!string} selector A DOMString containing one or more selectors to match\r\n * @param {HTMLElement|DocumentFragment} [_container] Container queried\r\n * @returns {HTMLCollection|NodeList} A live or *static* (not live) collection of the `container`'s children Element that match the `selector`.\r\n * @memberof DOM\r\n */\r\nexport function getElements(selector, _container) {\r\n    var container = valOrDefault(_container, document);\r\n\r\n    if (isNullOrWhitespace(selector)) {\r\n        return null;\r\n    }\r\n\r\n    if (container instanceof DocumentFragment) {\r\n        return container.querySelectorAll(selector);\r\n    }\r\n\r\n    if (isClassSelector(selector)) {\r\n        return container.getElementsByClassName(selector.substring(1));\r\n    }\r\n\r\n    return container.querySelectorAll(selector);\r\n}\r\n\r\n/**\r\n * Returns the first Template within the specified container that matches the specified selector, group or selectors.\r\n * @param {string} selector A DOMString containing one or more selectors to match\r\n * @param {HTMLElement} [_container] Container queried\r\n * @returns {HTMLTemplateElement|null} The first Template matches that matches the specified set of CSS selectors.\r\n * @memberof DOM\r\n */\r\nexport function getTemplate(selector, _container) {\r\n    return 'content' in document.createElement('template') ? getElement(selector, _container) : null;\r\n}\r\n\r\n/**\r\n * Returns a duplicate of the template.\r\n * @param {HTMLTemplateElement} template \r\n * @param {boolean} deep used to decide whether the children of the template should also be clone\r\n * @returns {DocumentFragment} The template's clone.\r\n * @memberof DOM\r\n */\r\nexport function cloneTemplate(template, deep) {\r\n    return template ? document.importNode(template.content, valOrDefault(deep, true)) : template;\r\n}\r\n\r\n/**\r\n * Gets the previous or next element of the specified element\r\n * @param {string} dir sibling direction\r\n * @param {HTMLElement} element element\r\n * @returns {(Element|null)} Element or null\r\n * @private\r\n */\r\n/* istanbul ignore next */\r\nfunction getElementSibling(dir, element, pred) {\r\n    var sibling = element[dir];\r\n\r\n    if (isFunction(pred)) {\r\n        while (isElement(sibling) && pred(sibling)) {\r\n            sibling = sibling[dir];\r\n        }\r\n    }\r\n\r\n    return sibling;\r\n}\r\n\r\n/**\r\n * Gets the previous element of the specified one in its parent's children list\r\n * @function getPreviousElementSibling\r\n * @param {HTMLElement} el element\r\n * @param {*} pred Search end condition\r\n * @returns {(Element|null)} Element or null if the specified element is the first one in the list\r\n * @memberof DOM\r\n */\r\nexport const getPreviousElementSibling = getElementSibling.bind(null, \"previousElementSibling\");\r\n\r\n/**\r\n * Gets the element following the specified one in its parent's children list\r\n * @function getNextElementSibling\r\n * @param {HTMLElement} el element\r\n * @param {*} pred Search end condition\r\n * @returns {(Element|null)} Element or null if the specified element is the last one in the list\r\n * @memberof DOM\r\n */\r\nexport const getNextElementSibling = getElementSibling.bind(null, \"nextElementSibling\");\r\n\r\n/**\r\n * Finds an ancestor of an element\r\n * @param {Element} target \r\n * @param {Function} pred Decides whether the target is found\r\n * @param {number} [_max] Maximum number of iterations\r\n * @returns {Element|null}\r\n * @memberof DOM\r\n */\r\nexport function findAncestor(target, pred, _max) {\r\n    if (!isElement(target)) {\r\n        throw new Error(\"The given target parameter is not a valid HTML Element\");\r\n    }\r\n\r\n    if (!isFunction(pred)) {\r\n        throw new Error(\"The given pred parameter is not a valid Function\");\r\n    }\r\n\r\n    var parent = target.parentElement;\r\n    \r\n    if (_max > 0) {\r\n        return findAncestorIter(parent, pred, _max - 1);\r\n    }\r\n\r\n    return findAncestorInf(parent, pred);\r\n}\r\n\r\n/**\r\n * Look an ancestor of an element using a callback\r\n * @param {Element} target \r\n * @param {Function} pred Decides whether the target is found\r\n * @private\r\n */\r\n/* istanbul ignore next */\r\nfunction findAncestorInf(target, pred) {\r\n    if (isNullOrUndefined(target)) {\r\n        return null;\r\n    }\r\n\r\n    if (pred(target)) {\r\n        return target;\r\n    }\r\n\r\n    return findAncestorInf(target.parentElement, pred);\r\n}\r\n\r\n/**\r\n * Look for an ancestor of an element using a callback with a maximum number of iteration\r\n * @param {Element} target \r\n * @param {Function} pred Decides whether the target is found\r\n * @param {number} max Maximum number of iterations\r\n * @private\r\n */\r\n/* istanbul ignore next */\r\nfunction findAncestorIter(target, pred, max) {\r\n    if (isNullOrUndefined(target) || max === 0) {\r\n        return null;\r\n    }\r\n\r\n    if (pred(target)) {\r\n        return target;\r\n    }\r\n\r\n    return findAncestorIter(target.parentElement, pred, max - 1);\r\n}","import { getElement, getElements, removeClass, addClass, isHTMLElement } from '@dom/index.js';\r\nimport { isNullOrWhitespace, isEmpty } from '@std/index.js';\r\n\r\nconst moveDown = (label) => addClass(label, 'down');\r\nconst moveUp = (label) => removeClass(label, 'down');\r\nconst addFocus = (element) => addClass(element, 'focused');\r\nconst removeFocus = (element) => removeClass(element, 'focused');\r\n\r\nexport function floatingLabel(form) {\r\n    const labels = getElements('.form-label', form);\r\n\r\n    for (let i = 0; i < labels.length; i++) {\r\n        let label = labels[i];\r\n        if (label.dataset['type'] == 'placeholder' && !isNullOrWhitespace(label.htmlFor)) {\r\n            let input = getElement(`#${label.htmlFor}`);\r\n\r\n            if (isHTMLElement(input)) {\r\n                if (isNullOrWhitespace(input.placeholder)) {\r\n                    bindEvents(input, label);\r\n                    if (isEmpty(input.value)) {\r\n                        moveDown(label);\r\n                    }\r\n                } else {\r\n                    console.warn(`%c@zenkai%c #FloatingLabel>%cfloatingLabel:%c Input \"${label.htmlFor}\" contains a placeholder`, \"text-decoration: underline\", \"\", \"font-weight: bold;\",\"font-weight: normal;\");\r\n                }\r\n            } else {\r\n                console.error(`%c@zenkai%c #FloatingLabel>%cfloatingLabel:%c Missing input for label \"${label.htmlFor}\"`, \"text-decoration: underline\", \"\", \"font-weight: bold;\",\"font-weight: normal;\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Bind DOM events\r\n     * @param {HTMLInputElement} input \r\n     * @param {HTMLLabelElement} label \r\n     */\r\n    function bindEvents(input, label) {\r\n        if (isNullOrWhitespace(input.placeholder)) {\r\n            input.addEventListener('focus', function (e) {\r\n                console.log(\"focus called\");\r\n                input.placeholder = \"\";\r\n                moveUp(label);\r\n                addFocus(label.parentElement);\r\n            });\r\n            input.addEventListener('blur', function (e) {\r\n                console.log(\"blur called\");\r\n                if (isEmpty(this.value)) {\r\n                    moveDown(label);\r\n                }\r\n                removeFocus(label.parentElement);\r\n            });\r\n            input.addEventListener('input', function (e) {\r\n                console.log(\"input called\");\r\n                // check if input does not have focus\r\n                if (document.activeElement != input) {\r\n                    if (isEmpty(this.value)) {\r\n                        moveDown(label);\r\n                    } else {\r\n                        moveUp(label);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    return labels;\r\n}","import { isHTMLElement, getElements, getElement } from \"@dom/index.js\";\r\nimport { valOrDefault, isString, isNullOrUndefined, isNullOrWhitespace, isEmpty } from \"@std/index.js\";\r\n\r\nconst TYPE = 'type';\r\nconst STATE = 'state';\r\nconst CHECKED = 'checked';\r\nconst UNCHECKED = 'unchecked';\r\n\r\nexport const getType = (element) => element.dataset[TYPE];\r\n\r\nexport const getState = (element) => element.dataset[STATE];\r\n\r\nexport const setState = (element, value) => element.dataset[STATE] = value;\r\n\r\nexport const check = (element, value) => setState(element, valOrDefault(value, CHECKED));\r\n\r\nexport const uncheck = (element, value) => setState(element, valOrDefault(value, UNCHECKED));\r\n\r\nexport function getComponentElement(container, pred, selector) {\r\n    if (isHTMLElement(container)) {\r\n        return pred(container) ? [container] : getElements(selector, container);\r\n    } else if (isString(container) && !isEmpty(container)) {\r\n        let _container = getElement(container);\r\n        return isNullOrUndefined(_container) ? null : getComponentElement(_container);\r\n    } else if (isNullOrUndefined(container)) {\r\n        return getElements(selector);\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport function getInput(type, label) {\r\n    if (isNullOrWhitespace(label.htmlFor)) {\r\n        return getElement(`input[type='${valOrDefault(type, 'text')}']`, label);\r\n    }\r\n    \r\n    return getElement(`#${label.htmlFor}`);\r\n}\r\n\r\nexport const toData = (name) => `[data-type=${name}]`;\r\n\r\nexport const isSelector = (element, type) => element.dataset['type'] === type;","import { isFunction, isNullOrUndefined, isNull, valOrDefault, hasOwn } from '@std/index.js';\r\nimport { check, uncheck, getState } from '../utils.js';\r\n\r\nconst Status = {\r\n    ON: 'on',\r\n    OFF: 'off'\r\n};\r\n\r\nexport const BaseSelectorItem = {\r\n    init(args) {\r\n        Object.assign(this, args);\r\n\r\n        if (this.isChecked()) {\r\n            check(this.container, Status.ON);\r\n        }\r\n\r\n        return this;\r\n    },\r\n    /** @type {HTMLElement} */\r\n    container: null,\r\n    /** @type {number} */\r\n    index: null,\r\n    /** @returns {string} */\r\n    get value() { return this.container.dataset['value']; },\r\n    /** @returns {boolean} */\r\n    isChecked() { return getState(this.container) === Status.ON; },\r\n    /** @returns {boolean} */\r\n    setChecked(isChecked) {\r\n        if (isNullOrUndefined(isChecked)) {\r\n            return false;\r\n        }\r\n\r\n        if (isChecked) {\r\n            check(this.container, Status.ON);\r\n        } else {\r\n            uncheck(this.container, Status.OFF);\r\n        }\r\n\r\n        return true;\r\n    },\r\n};\r\n\r\nexport const BaseSelector = {\r\n    name: 'selector',\r\n    /** @type {HTMLElement} */\r\n    container: null,\r\n    /** @type {HTMLElement[]} */\r\n    items: null,\r\n    /** @type {number} */\r\n    selectedIndex: null,\r\n    /** @type {HTMLElement} */\r\n    selectedItem: null,\r\n    /** @type {Function} */\r\n    beforeChange: null,\r\n    /** @type {Function} */\r\n    afterChange: null,\r\n    get value() {\r\n        return this.selectedItem.value;\r\n    },\r\n    setSelectedItem(item) {\r\n        if (!this.items.includes(item)) {\r\n            return null;\r\n        }\r\n\r\n        if (this.selectedItem) {\r\n            this.selectedItem.setChecked(false);\r\n        }\r\n        this.selectedItem = item;\r\n        this.selectedItem.setChecked(true);\r\n\r\n        return true;\r\n    },\r\n    init() {\r\n        var value = this.container.dataset['value'];\r\n        var defaultItem = null;\r\n\r\n        for (let i = 0; i < this.items.length; i++) {\r\n            let item = this.items[i];\r\n\r\n            if (item.isChecked()) {\r\n                this.setSelectedItem(item);\r\n            }\r\n            if (item.value === value) {\r\n                defaultItem = item;\r\n            }\r\n        }\r\n\r\n        if (isNull(this.selectedItem) && !isNull(defaultItem)) {\r\n            this.setSelectedItem(defaultItem);\r\n        }\r\n\r\n        this.bindEvents();\r\n\r\n        return this;\r\n    },\r\n    bindEvents() {\r\n        this.container.addEventListener('click', (event) => {\r\n            const target = event.target;\r\n            if (!hasOwn(target.dataset, 'selector')) {\r\n                return;\r\n            }\r\n            \r\n            var halt = false;\r\n\r\n            if (isFunction(this.beforeChange)) {\r\n                halt = this.beforeChange(this, event) === false;\r\n            }\r\n\r\n            if (halt) {\r\n                return;\r\n            }\r\n\r\n            const item = this.items.find((i) => i.index === +valOrDefault(target.dataset.selectorIndex, -1));\r\n            if(isNullOrUndefined(item)) {\r\n                return;\r\n            }\r\n\r\n            this.setSelectedItem(item);\r\n\r\n            if (isFunction(this.afterChange)) {\r\n                this.afterChange(this, event);\r\n            }\r\n        });\r\n    }\r\n};\r\n","import { isFunction, isNullOrUndefined, isNull, valOrDefault } from '@std/index.js';\r\nimport { check, uncheck, getState } from '../utils.js';\r\n\r\nconst Status = {\r\n    ON: 'on',\r\n    OFF: 'off'\r\n};\r\n\r\nexport const FormSelectorItem = {\r\n    init(args) {\r\n        Object.assign(this, args);\r\n\r\n        if (this.isChecked()) {\r\n            check(this.container, Status.ON);\r\n        }\r\n\r\n        return this;\r\n    },\r\n    /** @type {HTMLElement} */\r\n    container: null,\r\n    /** @type {HTMLInputElement} */\r\n    input: null,\r\n    /** @type {number} */\r\n    index: null,\r\n    /** @returns {string} */\r\n    get value() { return this.input['value']; },\r\n    /** @returns {boolean} */\r\n    isChecked() { return this.input.checked; },\r\n    /**\r\n     * Set the state of the item\r\n     * @param {boolean} isChecked \r\n     * @returns {boolean} Value indicating the success of the operation\r\n     */\r\n    setChecked(isChecked) {\r\n        if (isNullOrUndefined(isChecked)) {\r\n            return false;\r\n        }\r\n\r\n        if (isChecked) {\r\n            this.input.checked = true;\r\n            check(this.container, Status.ON);\r\n        } else {\r\n            this.input.checked = false;\r\n            uncheck(this.container, Status.OFF);\r\n        }\r\n\r\n        return true;\r\n    },\r\n};\r\n\r\nexport const FormSelector = {\r\n    name: 'form-selector',\r\n    /** @type {HTMLElement} */\r\n    container: null,\r\n    /** @type {FormSelectorItem[]} */\r\n    items: null,\r\n    /** @type {number} */\r\n    selectedIndex: null,\r\n    /** @type {HTMLElement} */\r\n    selectedItem: null,\r\n    /** @type {Function} */\r\n    beforeChange: null,\r\n    /** @type {Function} */\r\n    afterChange: null,\r\n    get value() {\r\n        return this.selectedItem.value;\r\n    },\r\n    setSelectedItem(item) {\r\n        if (!this.items.includes(item)) {\r\n            return null;\r\n        }\r\n\r\n        if (this.selectedItem) {\r\n            this.selectedItem.setChecked(false);\r\n        }\r\n        this.selectedItem = item;\r\n        this.selectedItem.setChecked(true);\r\n\r\n        return true;\r\n    },\r\n    init() {\r\n        var value = this.container.dataset['value'];\r\n        var defaultItem = null;\r\n\r\n        for (let i = 0; i < this.items.length; i++) {\r\n            let item = this.items[i];\r\n\r\n            if (item.isChecked()) {\r\n                this.setSelectedItem(item);\r\n            }\r\n            if (item.value === value) {\r\n                defaultItem = item;\r\n            }\r\n        }\r\n\r\n        if (isNull(this.selectedItem) && !isNull(defaultItem)) {\r\n            this.setSelectedItem(defaultItem);\r\n        }\r\n\r\n        this.bindEvents();\r\n\r\n        return this;\r\n    },\r\n    bindEvents() {\r\n        this.container.addEventListener('change', (event) => {\r\n            const target = event.target;            \r\n\r\n            var halt = false;\r\n\r\n            if (isFunction(this.beforeChange)) {\r\n                halt = this.beforeChange(this, event) === false;\r\n            }\r\n\r\n            if (halt) {\r\n                target.checked = false;\r\n                this.items[this.selectedIndex].setChecked(true);\r\n                return;\r\n            }\r\n\r\n            const item = this.items.find((i) => i.index === +valOrDefault(target.dataset.selectorIndex, -1));\r\n            if(isNullOrUndefined(item)) {\r\n                return;\r\n            }\r\n\r\n            this.setSelectedItem(item);\r\n\r\n            if (isFunction(this.afterChange)) {\r\n                this.afterChange(this, event);\r\n            }\r\n        });\r\n    }\r\n};\r\n","import { getElements, isHTMLElement, isNodeList, createListItem } from '@dom/index.js';\r\nimport { getInput, getType } from \"../utils.js\";\r\nimport { BaseSelector, BaseSelectorItem } from './base-selector.js';\r\nimport { FormSelector, FormSelectorItem } from './form-selector.js';\r\n\r\nconst ErrorCode = {\r\n    BAD_CONTAINER: 'BAD_CONTAINER',\r\n    BAD_INPUT: 'BAD_INPUT'\r\n};\r\n\r\nconst createDomQuery = (selector) => `[data-type=\"${selector.name}\"]`;\r\n\r\nexport const DOMQuerySelector = {\r\n    BaseSelector: createDomQuery(BaseSelector),\r\n    FormSelector: createDomQuery(FormSelector)\r\n};\r\n\r\nexport const Factory = {\r\n    create(container, options) {\r\n        if (!isHTMLElement(container)) {\r\n            return ErrorCode.BAD_CONTAINER;\r\n        }\r\n\r\n        var itemContainers = getElements('[data-selector]', container);\r\n        if (!isNodeList(itemContainers)) {\r\n            return ErrorCode.BAD_CONTAINER;\r\n        }\r\n\r\n        var widget = null;\r\n        var items = null;\r\n        var type = getType(container);\r\n\r\n        switch (type) {\r\n            case 'selector':\r\n                items = createSelectorItem(itemContainers, type, false);\r\n                widget = Object.create(BaseSelector);\r\n                break;\r\n            case 'form-selector':\r\n                items = createSelectorItem(itemContainers, type, true);\r\n                widget = Object.create(FormSelector);\r\n                break;\r\n        }\r\n\r\n        Object.assign(widget, options, {\r\n            container: container,\r\n            items: items,\r\n            querySelector: createDomQuery(widget),\r\n        });\r\n\r\n        return widget;\r\n    }\r\n};\r\n\r\nfunction createSelectorItem(itemContainers, type, hasInput) {\r\n    var items = [];\r\n\r\n    var typeHandler = {\r\n        'selector': Object.create(BaseSelectorItem),\r\n        'form-selector': Object.create(FormSelectorItem),\r\n    };\r\n\r\n    for (let i = 0; i < itemContainers.length; i++) {\r\n        let itemContainer = itemContainers[i];\r\n        itemContainer.dataset.selectorIndex = i;\r\n\r\n        let args = {\r\n            container: itemContainer,\r\n            index: i\r\n        };\r\n\r\n        if (hasInput) {\r\n            let input = getInput('radio', itemContainer);\r\n            if (!isHTMLElement(input)) {\r\n                return ErrorCode.BAD_INPUT;\r\n            }\r\n            input.dataset.selectorIndex = i;\r\n            \r\n            Object.assign(args, { input: input });\r\n        }\r\n\r\n        let item = typeHandler[type]().init(args);\r\n\r\n        items.push(item);\r\n    }\r\n\r\n    return items;\r\n}","import { isNullOrUndefined, valOrDefault, hasOwn } from '@std/index.js';\r\nimport { getComponentElement } from '../utils.js';\r\nimport { Factory, DOMQuerySelector } from \"./factory.js\";\r\n\r\nconst ErrorHandler = {\r\n    BAD_CONTAINER: new Error(\"Missing container: A selector requires a container\"),\r\n    BAD_INPUT: new Error(\"Missing input: FormSelector requires an input in the container\"),\r\n};\r\n\r\nconst isSelector = (element) => RegExp('selector|form-selector').test(element.dataset['type']);\r\n\r\nconst domQuery = [DOMQuerySelector.BaseSelector, DOMQuerySelector.FormSelector].join(',');\r\n\r\nexport function Selector(container, _options) {\r\n    const selectorElements = getComponentElement(container, isSelector, domQuery);\r\n    var options = valOrDefault(_options, {});\r\n\r\n    if (isNullOrUndefined(selectorElements)) {\r\n        return null;\r\n    }\r\n\r\n    var selectors = [];\r\n\r\n    for (let i = 0; i < selectorElements.length; i++) {\r\n        let selector = Factory.create(selectorElements[i], options);\r\n        if (hasOwn(ErrorHandler, selector)) {\r\n            throw ErrorHandler[selector];\r\n        }\r\n        selector.init();\r\n\r\n        selectors.push(selector);\r\n    }\r\n\r\n    return selectors;\r\n}\r\n\r\nexport const SelectorFactory = Factory; ","import { isHTMLElement } from '@dom/index.js';\r\nimport { isFunction, isNullOrUndefined, valOrDefault, hasOwn } from '@std/index.js';\r\nimport { check, uncheck, getState, getType, getComponentElement, getInput } from \"./utils.js\";\r\n\r\nconst ErrorCode = {\r\n    BAD_CONTAINER: 'BAD_CONTAINER',\r\n    BAD_INPUT: 'BAD_INPUT'\r\n};\r\n\r\nconst ErrorHandler = {\r\n    BAD_CONTAINER: new Error(\"Missing container: A switch requires a container\"),\r\n    BAD_INPUT: new Error(\"Missing input: FormSwitch requires an input in the container\"),\r\n};\r\n\r\nconst Status = {\r\n    ON: 'on',\r\n    OFF: 'off'\r\n};\r\n\r\nconst createDomQuery = (selector) => `[data-type=\"${selector.name}\"]`;\r\n\r\nconst isSwitch = (element) => RegExp('switch|form-switch').test(element.dataset['type']);\r\n\r\nconst SwitchFactory = {\r\n    create(container, options) {\r\n        if (!isHTMLElement(container)) {\r\n            return ErrorCode.BAD_CONTAINER;\r\n        }\r\n\r\n        var widget = null;\r\n        var input = null;\r\n\r\n        switch (getType(container)) {\r\n            case 'switch':\r\n                widget = Object.create(BaseSwitch);\r\n                break;\r\n            case 'form-switch':\r\n                input = getInput('checkbox', container);\r\n                if (!isHTMLElement(input)) {\r\n                    return ErrorCode.BAD_INPUT;\r\n                }\r\n                options.input = input;\r\n                widget = Object.create(FormSwitch);\r\n                break;\r\n        }\r\n\r\n        Object.assign(widget, options, {\r\n            container: container,\r\n            querySelector: createDomQuery(widget),\r\n        });\r\n\r\n\r\n        return widget;\r\n    }\r\n};\r\n\r\nconst BaseSwitch = {\r\n    name: 'switch',\r\n    /** @type {HTMLElement} */\r\n    container: null,\r\n    /** @type {Function} */\r\n    beforeChange: null,\r\n    /** @type {Function} */\r\n    afterChange: null,\r\n    get value() {\r\n        return this.container.dataset['value'];\r\n    },\r\n    /**\r\n     * Verifies that the switch is checked\r\n     * @param {boolean} check \r\n     * @returns {boolean} A value indicating whether the switch is checked\r\n     */\r\n    isChecked() {\r\n        return getState(this.container) === Status.ON;\r\n    },\r\n    /**\r\n     * Changes the state of the switch\r\n     * @param {boolean} isChecked \r\n     * @returns {boolean} A value indicating whether the operation was a success\r\n     */\r\n    setChecked(isChecked) {\r\n        if (isNullOrUndefined(isChecked)) {\r\n            return false;\r\n        }\r\n\r\n        if (isChecked) {\r\n            check(this.container, Status.ON);\r\n        } else {\r\n            uncheck(this.container, Status.OFF);\r\n        }\r\n\r\n        return true;\r\n    },\r\n    toggle() {\r\n        if (this.isChecked()) {\r\n            this.setChecked(false);\r\n        } else {\r\n            this.setChecked(true);\r\n        }\r\n    },\r\n    init(args) {\r\n        Object.assign(this, args);\r\n\r\n        if (this.isChecked()) {\r\n            check(this.container, Status.ON);\r\n        }\r\n\r\n        this.bindEvents();\r\n\r\n        return this;\r\n    },\r\n    bindEvents() {\r\n        this.container.addEventListener('click', (event) => {\r\n            var halt = false;\r\n\r\n            if (isFunction(this.beforeChange)) {\r\n                halt = this.beforeChange(this, event) === false;\r\n            }\r\n\r\n            if (halt) {\r\n                return;\r\n            }\r\n\r\n            this.toggle();\r\n\r\n            if (isFunction(this.afterChange)) {\r\n                this.afterChange(this, event);\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\nconst FormSwitch = {\r\n    name: 'form-switch',\r\n    /** @type {HTMLElement} */\r\n    container: null,\r\n    /** @type {HTMLInputElement} */\r\n    input: null,\r\n    /** @type {Function} */\r\n    beforeChange: null,\r\n    /** @type {Function} */\r\n    afterChange: null,\r\n    get value() {\r\n        return this.input.value;\r\n    },\r\n\r\n    /**\r\n     * Verifies that the switch is checked\r\n     * @param {boolean} check \r\n     * @returns {boolean} A value indicating whether the switch is checked\r\n     */\r\n    isChecked() {\r\n        return getState(this.container) === Status.ON;\r\n    },\r\n    /**\r\n     * Changes the state of the switch\r\n     * @param {boolean} isChecked \r\n     * @returns {boolean} A value indicating whether the operation was a success\r\n     */\r\n    setChecked(isChecked) {\r\n        if (isNullOrUndefined(isChecked)) {\r\n            return false;\r\n        }\r\n\r\n        this.input.checked = isChecked;\r\n\r\n        if (isChecked) {\r\n            check(this.container, Status.ON);\r\n        } else {\r\n            uncheck(this.container, Status.OFF);\r\n        }\r\n\r\n        return true;\r\n    },\r\n    toggle() {\r\n        if (this.isChecked()) {\r\n            this.setChecked(false);\r\n        } else {\r\n            this.setChecked(true);\r\n        }\r\n    },\r\n    init(args) {\r\n        Object.assign(this, args);\r\n\r\n        if (this.input.checked) {\r\n            this.setChecked(true);\r\n        }\r\n\r\n        this.bindEvents();\r\n\r\n        return this;\r\n    },\r\n    bindEvents() {\r\n        this.input.addEventListener('change', (event) => {\r\n            var halt = false;\r\n\r\n            if (isFunction(this.beforeChange)) {\r\n                halt = this.beforeChange(this, event) === false;\r\n            }\r\n\r\n            if (halt) {\r\n                this.input.checked = !this.input.checked;   // revert input checked state\r\n                return;\r\n            }\r\n\r\n            this.toggle();\r\n\r\n            if (isFunction(this.afterChange)) {\r\n                this.afterChange(this, event);\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\nconst domQuery = [createDomQuery(BaseSwitch), createDomQuery(FormSwitch)].join(',');\r\n\r\nexport function Switch(container, _options) {\r\n    const switcheElements = getComponentElement(container, isSwitch, domQuery);\r\n    var options = valOrDefault(_options, {});\r\n\r\n    if (isNullOrUndefined(switcheElements)) {\r\n        return null;\r\n    }\r\n\r\n    var switches = [];\r\n\r\n    for (let i = 0; i < switcheElements.length; i++) {\r\n        let $switch = SwitchFactory.create(switcheElements[i], options);\r\n        if (hasOwn(ErrorHandler, $switch)) {\r\n            throw ErrorHandler[$switch];\r\n        }\r\n        $switch.init();\r\n\r\n        switches.push($switch);\r\n    }\r\n\r\n    return switches;\r\n}","/**\r\n * Shows an element\r\n * @param {HTMLElement} element\r\n */\r\nexport function show(element) { element.style.display = \"block\"; }\r\n\r\n/**\r\n * Hides an element\r\n * @param {HTMLElement} element\r\n */\r\nexport function hide(element) { element.style.display = \"none\"; }","import { getElement, getElements, addClass, removeClass, isHTMLElement, findAncestor } from '@dom/index.js';\r\nimport { isNullOrUndefined, isFunction, valOrDefault, hasOwn } from '@std/index.js';\r\nimport { show, hide } from './utils.js';\r\nimport { getComponentElement } from './form/utils.js';\r\n\r\nconst ATTRIBUTE = 'collapsible';\r\n\r\nconst ErrorCode = {\r\n    BAD_CONTAINER_COLLAPSIBLE: 'BAD_CONTAINER_COLLAPSIBLE',\r\n    BAD_CONTAINER_ACCORDION: 'BAD_CONTAINER_ACCORDION',\r\n};\r\nconst ErrorHandler = {\r\n    BAD_CONTAINER_COLLAPSIBLE: new Error(\"Missing container: A collapsible requires a container\"),\r\n    BAD_CONTAINER_ACCORDION: new Error(\"Missing container: An accordion requires a container\"),\r\n};\r\n\r\nconst State = {\r\n    OPEN: 'expanded',\r\n    CLOSED: 'collapsed'\r\n};\r\n\r\nconst isCollapsible = (el) => ATTRIBUTE in el.dataset;\r\n\r\nconst isAccordion = (el) => el.dataset['boost'] === 'accordion';\r\n\r\nconst CollapsibleFactory = {\r\n    /** @returns {CollapsibleFactory} */\r\n    create(container, options) {\r\n        if (!isHTMLElement(container)) {\r\n            return ErrorCode.BAD_CONTAINER_COLLAPSIBLE;\r\n        }\r\n\r\n        var instance = Object.create(this);\r\n\r\n        Object.assign(instance, options, {\r\n            container: container\r\n        });\r\n\r\n        return instance;\r\n    },\r\n    name: 'collapsible',\r\n    /** @type {HTMLElement} */\r\n    container: null,\r\n    /** @type {HTMLElement} */\r\n    header: null,\r\n    /** @type {HTMLElement} */\r\n    content: null,\r\n    /** @type {Function} */\r\n    beforeOpen: null,\r\n    /** @type {Function} */\r\n    afterOpen: null,\r\n    /** @type {Function} */\r\n    beforeClose: null,\r\n    /** @type {Function} */\r\n    afterClose: null,\r\n    getState() { return this.container.dataset[this.name]; },\r\n    setState(val) { this.container.dataset[this.name] = val; },\r\n    /** Verifies that the container is collapsed (closed) */\r\n    isCollapsed() { return this.getState() === State.CLOSED; },\r\n    /** Verifies that the container is expanded (open) */\r\n    isExpanded() { return this.getState() === State.OPEN; },\r\n    isClosed: false,\r\n    isInitialized: false,\r\n    /** Opens the container and calls the defined pre/post operations */\r\n    open() {\r\n        if (this.isInitialized && !this.isClosed) {\r\n            return this;\r\n        }\r\n\r\n        var halt = false;\r\n\r\n        if (isFunction(this.beforeOpen)) {\r\n            halt = this.beforeOpen(this) === false;\r\n        }\r\n\r\n        if (halt) {\r\n            return this;\r\n        }\r\n\r\n        this.toggle(show, State.OPEN, addClass);\r\n\r\n        if (isFunction(this.afterOpen)) {\r\n            this.afterOpen(this);\r\n        }\r\n\r\n        this.isClosed = false;\r\n\r\n        return this;\r\n    },\r\n    /** Closes the container and calls the defined pre/post operations */\r\n    close() {\r\n        if (this.isInitialized && this.isClosed) {\r\n            return this;\r\n        }\r\n\r\n        var halt = false;\r\n\r\n        if (isFunction(this.beforeClose)) {\r\n            halt = this.beforeClose(this) === false;\r\n        }\r\n\r\n        if (halt) {\r\n            return this;\r\n        }\r\n\r\n        this.toggle(hide, State.CLOSED, removeClass);\r\n\r\n        if (isFunction(this.afterClose)) {\r\n            this.afterClose(this);\r\n        }\r\n\r\n        this.isClosed = true;\r\n\r\n        return this;\r\n    },\r\n    toggle(displayCb, state, classCb) {\r\n        displayCb(this.content);\r\n        this.setState(state);\r\n        classCb(this.container, 'expanded');\r\n    },\r\n    init(args) {\r\n        Object.assign(this, args);\r\n\r\n        this.header = getElement(`[data-${this.name}-header]`, this.container);\r\n        this.content = getElement(`[data-${this.name}-content]`, this.container);\r\n\r\n        if (this.isCollapsed()) {\r\n            this.close();\r\n        } else if (this.isExpanded()) {\r\n            this.isClosed = true;\r\n            this.open();\r\n        }\r\n        this.bindEvents();\r\n\r\n        this.isInitialized = true;\r\n        return this;\r\n    },\r\n    bindEvents() {\r\n        const container = this.container;\r\n        const header = this.header;\r\n\r\n        header.addEventListener('click', (e) => {\r\n            var target = e.target;\r\n            var targetCollapsible = findAncestor(target, (el) => this.name in el.dataset);\r\n            if (container === targetCollapsible) {\r\n                if (this.isCollapsed()) {\r\n                    this.open();\r\n                } else if (header.parentNode === container) {\r\n                    this.close();\r\n                }\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\nconst AccordionFactory = {\r\n    /** @returns {AccordionFactory} */\r\n    create(container, options) {\r\n        if (!isHTMLElement(container)) {\r\n            return ErrorCode.BAD_CONTAINER_ACCORDION;\r\n        }\r\n\r\n        var instance = Object.create(this);\r\n\r\n        Object.assign(instance, options, {\r\n            container: container\r\n        });\r\n\r\n        return instance;\r\n    },\r\n    /** @type {HTMLElement} */\r\n    container: null,\r\n    /** @type {CollapsibleFactory[]} */\r\n    sections: null,\r\n    /** @type {CollapsibleFactory} */\r\n    selectedSection: null,\r\n    /** @type {Function} */\r\n    beforeChange: null,\r\n    /** @type {Function} */\r\n    afterChange: null,\r\n    init() {\r\n        this.sections = [];\r\n\r\n        var accordionElements = getElements('[data-accordion]', this.container);\r\n\r\n        for (let i = 0; i < accordionElements.length; i++) {\r\n            let element = accordionElements[i];\r\n            let collapsible = CollapsibleFactory.create(element, {\r\n                name: 'accordion',\r\n                index: i,\r\n                afterOpen: (selected) => {\r\n                    if (isFunction(this.beforeChange)) {\r\n                        this.beforeChange(selected);\r\n                    }\r\n\r\n                    this.sections.filter((section) => section.index !== selected.index)\r\n                        .forEach((other) => other.close());\r\n\r\n                    if (isFunction(this.afterChange)) {\r\n                        this.afterChange(selected);\r\n                    }\r\n\r\n                    this.selectedSection = selected;\r\n                }\r\n            });\r\n            if (hasOwn(ErrorCode, collapsible)) {\r\n                return collapsible;\r\n            }\r\n            this.sections.push(collapsible);\r\n            collapsible.init();\r\n        }\r\n\r\n        return this;\r\n    }\r\n};\r\n\r\n/**\r\n * Makes a container collapsible\r\n * @param {!HTMLElement} container \r\n * @param {Object} [options]\r\n */\r\nexport function Collapsible(container, _options) {\r\n    var collapsibleElements = getComponentElement(container, isCollapsible, '[data-collapsible]');\r\n    var options = valOrDefault(_options, {});\r\n\r\n    if (isNullOrUndefined(collapsibleElements)) {\r\n        return null;\r\n    }\r\n\r\n    var collapsibles = [];\r\n\r\n    for (let i = 0; i < collapsibleElements.length; i++) {\r\n        let collapsible = CollapsibleFactory.create(collapsibleElements[i], options);\r\n        if (hasOwn(ErrorHandler, collapsible)) {\r\n            throw ErrorHandler[collapsible];\r\n        }\r\n        collapsible.init();\r\n\r\n        collapsibles.push(collapsible);\r\n    }\r\n\r\n    return collapsibles;\r\n}\r\n\r\n/**\r\n * Transforms a container into an accordion\r\n * @param {!HTMLElement} container \r\n * @param {Object} [_options]\r\n */\r\nexport function Accordion(container, _options) {\r\n    var accordionElements = getComponentElement(container, isAccordion, '[data-boost=accordion]');\r\n    var options = valOrDefault(_options, {});\r\n\r\n    if (isNullOrUndefined(accordionElements)) {\r\n        return null;\r\n    }\r\n\r\n    var accordions = [];\r\n\r\n    for (let i = 0; i < accordionElements.length; i++) {\r\n        let accordion = AccordionFactory.create(accordionElements[i], options);\r\n        if (hasOwn(ErrorHandler, accordion)) {\r\n            throw ErrorHandler[accordion];\r\n        }\r\n        accordion.init();\r\n        accordions.push(accordion);\r\n    }\r\n\r\n    return accordions;\r\n}\r\n","import { getElement, getElements, isHTMLElement } from '@dom/index.js';\r\n\r\n/**\r\n * Add a counter to an input element\r\n * @param {HTMLElement} container \r\n */\r\nexport function inputCounter(container) {\r\n    const counters = getElements('[data-counter]', container);\r\n\r\n    for (let i = 0; i < counters.length; i++) {\r\n        let counter = counters[i];\r\n        let ref = counter.dataset['counter'];\r\n        let input = getElement(`#${ref}`);\r\n        if (isHTMLElement(input)) {\r\n            counter.dataset['counterMax'] = input.maxLength;\r\n            counter.dataset['counterVal'] = input.value.length;\r\n            bindEvents(input, counter);\r\n        } else {\r\n            console.error(`%c@zenkai%c #InputCounter>%cinputCounter:%c Failed to add counter ${ref}. Input (referenced) was not found.`, \"text-decoration: underline\", \"\", \"font-weight: bold;\",\"font-weight: normal;\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Bind DOM events\r\n     * @param {HTMLInputElement} input \r\n     * @param {HTMLElement} counter \r\n     */\r\n    function bindEvents(input, counter) {\r\n        input.addEventListener('input', function (e) {\r\n            counter.dataset['counterVal'] = input.value.length;\r\n        });\r\n    }\r\n\r\n    return counters;\r\n}"],"names":["valOrDefault","arg","value","isNullable","isUndefined","isNullOrUndefined","isEmpty","obj","Array","isArray","isString","length","String","isFunction","isIterable","Symbol","iterator","isNull","isNullOrWhitespace","str","test","hasOwnProperty","Object","prototype","hasOwn","key","call","isElementNode","nodeType","Node","ELEMENT_NODE","isNode","isElement","Element","isHTMLElement","kind","HTMLElement","element","values","pred","i","some","name","type","tag","interfaceName","TagNameMapping","ccString","replace","trim","toLowerCase","s","toUpperCase","pascalCase","window","tagName","includes","isHTMLCollection","HTMLCollection","_htmlToElement","prop","html","template","document","createElement","innerHTML","content","bind","formatClass","c","parseClass","join","toString","hasClass","className","Error","split","removeClass","attrClass","remove","el","forEach","val","addClass","parsedClass","setClass","echo","o","addAttributes","attribute","_typeof","ATTR_MAP","accesskey","assign","data","dataset","editable","draggable","hidden","id","lang","style","target","tabindex","text","title","cite","href","alt","src","accept","disabled","placeholder","readonly","DEFAULT_MAP","keys","create","_attribute","_children","children","parent","fragment","createDocumentFragment","from","appendChild","createTextNode","appendChildren","textContent","addContent","inputTypes","input","buttonTypes","button","isClassSelector","selector","isIdSelector","getElement","_container","container","DocumentFragment","querySelector","getElementById","substring","getElementsByClassName","getElements","querySelectorAll","getElementSibling","dir","sibling","findAncestor","_max","parentElement","findAncestorIter","max","findAncestorInf","moveDown","label","moveUp","getType","getState","setState","check","uncheck","getComponentElement","getInput","htmlFor","Status","BaseSelectorItem","init","args","this","isChecked","index","setChecked","BaseSelector","items","selectedIndex","selectedItem","beforeChange","afterChange","setSelectedItem","item","defaultItem","bindEvents","addEventListener","event","halt","_this","find","selectorIndex","FormSelectorItem","checked","FormSelector","ErrorCode","createDomQuery","DOMQuerySelector","Factory","options","itemContainers","NodeList","widget","createSelectorItem","hasInput","typeHandler","itemContainer","push","ErrorHandler","BAD_CONTAINER","BAD_INPUT","isSelector","RegExp","domQuery","SelectorFactory","isSwitch","SwitchFactory","BaseSwitch","FormSwitch","toggle","_this2","show","display","hide","BAD_CONTAINER_COLLAPSIBLE","BAD_CONTAINER_ACCORDION","State","isCollapsible","isAccordion","CollapsibleFactory","instance","header","beforeOpen","afterOpen","beforeClose","afterClose","isCollapsed","isExpanded","isClosed","isInitialized","open","close","displayCb","state","classCb","e","targetCollapsible","parentNode","AccordionFactory","sections","selectedSection","accordionElements","collapsible","selected","filter","section","other","_options","accordions","accordion","collapsibleElements","collapsibles","selectorElements","selectors","switcheElements","switches","$switch","form","labels","console","warn","error","log","activeElement","counters","counter","ref","maxLength"],"mappings":"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"}